{"version":3,"sources":["components/ContactForm.js","components/Contact.js","store/actions/contact-actions.js","store/index.js","store/reducers/contact-reducers.js","App.js","serviceWorker.js","index.js"],"names":["ContactForm","props","onChangeHandle","e","target","name","value","setState","state","onSubmit","AddUpdate","console","log","fullname","mobile","email","address","prevProps","prevState","id","this","data","Fragment","className","placeholder","onChange","type","rows","onClick","React","Component","Contact","TakeData","UpdateContact","CreateContact","contact","store","subscribe","getState","ContactReducers","length","map","dt","i","key","DeleteContact","colSpan","connect","payload","RootReducers","combineReducers","action","push","splice","App","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","exact","path","component","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.0177465c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default class ContactForm extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tconsole.log(props)\r\n\t\tthis.state = { fullname: '', mobile: '', email: '', address: ''};\r\n\t}\r\n\r\n\tonChangeHandle = (e) =>{\r\n\t\tconst { name, value } = e.target;\r\n\t\tthis.setState({\r\n\t\t\t...this.state, [name] : value\r\n\t\t})\r\n\r\n\t}\r\n\r\n\tcomponentDidUpdate(prevProps, prevState) {\r\n\t\tconsole.log('prev:', prevProps.id, 'new',this.props.id)\r\n\t\t//Jika terjadi perubahan pada id sebelum dan sesudah update (Setelah Melakukan aksi)\r\n\t\tif(prevProps.id !== this.props.id){\r\n\t\t\t// Maka cek id props saat ini jika id === '' maka set State dengen data prop\r\n\t\t\tthis.props.id !== '' ? this.setState(this.props.data):\r\n\t\t\tthis.setState({ fullname: '', mobile: '', email: '', address: ''})\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tonSubmit = () =>{\r\n\t\tthis.props.AddUpdate(this.state)\r\n\t\t// this.setState({ fullname: '', mobile: '', email: '', address: ''})\r\n\t}\r\n\r\n\r\n\trender() {\r\n\t\t// console.log(this.state)\r\n\t\treturn (\r\n\t\t\t<React.Fragment>\r\n\t\t\t\t<div className='card bg-primary'>\r\n\t\t\t\t\t<div className='card-header text-white text-uppercase text-center'>\r\n\t\t\t\t\t\t<h6>Contact Form</h6>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className='card-body bg-white'>\r\n\t\t\t\t\t<form onSubmit={()=>this.onSubmit()}>\r\n\t\t\t\t\t\t<div className='form-group'>\r\n\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\tname='fullname'\r\n\t\t\t\t\t\t\t\tplaceholder='Full Name'\r\n\t\t\t\t\t\t\t\tclassName='form-control'\r\n\t\t\t\t\t\t\t\tvalue={this.state.fullname}\r\n\t\t\t\t\t\t\t\tonChange={this.onChangeHandle} \r\n\t\t\t\t\t\t\t\ttype=\"text\"/>\r\n\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t<div className='form-group'>\r\n\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\tname='mobile'\r\n\t\t\t\t\t\t\t\tplaceholder='Mobile Phone'\r\n\t\t\t\t\t\t\t\tclassName='form-control'\r\n\t\t\t\t\t\t\t\tvalue={this.state.mobile}\r\n\t\t\t\t\t\t\t\tonChange={this.onChangeHandle}\r\n\t\t\t\t\t\t\t\ttype=\"text\"/>\r\n\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t<div className='form-group'>\r\n\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\tname='email'\r\n\t\t\t\t\t\t\t\tplaceholder='E-mail'\r\n\t\t\t\t\t\t\t\tclassName='form-control'\r\n\t\t\t\t\t\t\t\tvalue={this.state.email}\r\n\t\t\t\t\t\t\t\tonChange={this.onChangeHandle}\r\n\t\t\t\t\t\t\t\ttype=\"text\"/>\r\n\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t<div className='form-group'>\r\n\t\t\t\t\t\t\t<textarea\r\n\t\t\t\t\t\t\t\tname='address'\r\n\t\t\t\t\t\t\t\tplaceholder='Home address'\r\n\t\t\t\t\t\t\t\trows='6'\r\n\t\t\t\t\t\t\t\tclassName='form-control'\r\n\t\t\t\t\t\t\t\tvalue={this.state.address}\r\n\t\t\t\t\t\t\t\tonChange={this.onChangeHandle} \r\n\t\t\t\t\t\t\t\t></textarea>\r\n\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t<div className='form-group text-right'>\r\n\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\tvalue='Save Data'\r\n\t\t\t\t\t\t\t\tname='submit'\r\n\t\t\t\t\t\t\t\tclassName='btn btn-outline-primary'\r\n\t\t\t\t\t\t\t\tonClick={this.onSubmit} \r\n\t\t\t\t\t\t\t\ttype=\"button\"/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</form>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</React.Fragment>\r\n\t\t);\r\n\t}\r\n}\r\n","import React from 'react'; // Wajib sebelum membuat komponen (React V.16.9.0)\r\nimport { connect } from 'react-redux'; // Function Connect Redux untuk mendapatkan data STATE GLOBAL dan Funcion ACTION CREATOR nya ke dalam props komponen\r\nimport PropTypes from 'prop-types'; // Package Validasi Tipe Data Props didalam Components\r\nimport { CreateContact, DeleteContact, UpdateContact } from '../store/actions/contact-actions'; // ACTION CREATOR REDUX\r\n\r\nimport ContactForm from './ContactForm';\r\n\r\nclass Contact extends React.Component {\r\n\t// Validasi Jenis Tipe data Props\r\n\tstatic propTypes = {\r\n\t\tContactReducers : PropTypes.array.isRequired,\r\n\t\tCreateContact : PropTypes.func.isRequired,\r\n\t\tDeleteContact : PropTypes.func.isRequired,\r\n\t\tUpdateContact : PropTypes.func.isRequired\r\n\t}\r\n\t\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\t// Melakukan check di console terkait props yang masuk\r\n\t\t// console.log(props)\r\n\r\n\t\t// Mulai Menggunakan State\r\n\t\tthis.state = { contact: [], id: '', data: {} }\r\n\r\n\t\t//Mendeteksi ( Listener ) perubahan data Global State Redux\r\n\t\t// => Menggunakan props fungsi subscribe()\r\n\r\n\t\tprops.store.subscribe(()=>{\r\n\t\t\tthis.setState({\r\n\t\t\t\tcontact:  this.props.store.getState().ContactReducers\r\n\t\t\t})\r\n\t\t})\r\n\t}\r\n\r\n\tTakeData = (id, data) =>{\r\n\t\tthis.setState({\r\n\t\t\tid: id,\r\n\t\t\tdata: data\r\n\t\t})\r\n\r\n\t}\r\n\r\n\tAddUpdate = (data) =>{\r\n\t\tif(this.state.id !== ''){\r\n\t\t\tconsole.log('update')\r\n\t\t\tthis.props.UpdateContact(this.state.id, data)\r\n\t\t\tthis.setState({id: ''})\r\n\t\t}else {\r\n\t\t\tthis.props.CreateContact(data)\r\n\t\t\tthis.setState({id: ''})\r\n\t\t\t\r\n\t\t}\r\n\r\n\t}\r\n\r\n\trender() {\r\n\t\t// Memantau perubahan this.state setelah ada perubahan data\r\n\t\tconsole.log(this.state.contact)\r\n\t\treturn (\r\n\t\t\t<React.Fragment>\r\n\t\t\t<div className='row'>\r\n\t\t\t\t<div className='col-md-7 mt-3 mb-3'>\r\n\t\t\t\t\t<div className='card bg-success'>\r\n\t\t\t\t\t\t<div className='card-header text-white text-uppercase text-center'>\r\n\t\t\t\t\t\t\t<h6>Contact Table</h6>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className='card-body bg-white table-responsive'>\r\n\t\t\t\t\t\t\t<table className='table table-borderless table-striped table-hover'>\r\n\t\t\t\t\t\t\t\t<thead className='thead-light'>\r\n\t\t\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t\t\t<th>Full Name</th>\r\n\t\t\t\t\t\t\t\t\t\t<th>Mobile</th>\r\n\t\t\t\t\t\t\t\t\t\t<th>E-mail</th>\r\n\t\t\t\t\t\t\t\t\t\t<th>Action</th>\r\n\t\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t\t</thead>\r\n\t\t\t\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tthis.state.contact.length !== 0 ?\r\n\t\t\t\t\t\t\t\t\t\tthis.state.contact.map((dt, i)=>(\r\n\t\t\t\t\t\t\t\t\t\t\t<tr key={i}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<td>{dt.fullname}</td>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<td>{dt.mobile}</td>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<td>{dt.email}</td>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={()=>this.TakeData(i, dt)} \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName='btn-sm btn-warning'>Edit</button>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={()=>this.props.DeleteContact(i, dt)} \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName='btn-sm btn-danger'>Del</button>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t\t\t\t)) :\r\n\r\n\t\t\t\t\t\t\t\t\t\t(<tr>\r\n\t\t\t\t\t\t\t\t\t\t\t<td colSpan={4} className='text-center text-success'>\r\n\t\t\t\t\t\t\t\t\t\t\t\tLoading...\r\n\t\t\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t\t</tr>)\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t</tbody>\r\n\t\t\t\t\t\t\t</table>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className='col-md-5'>\r\n\t\t\t\t\t<ContactForm \r\n\t\t\t\t\t\t{...this.props}\r\n\r\n\t\t\t\t\t\tid={this.state.id}\r\n\t\t\t\t\t\tdata={this.state.data}\r\n\t\t\t\t\t\tAddUpdate={this.AddUpdate}\r\n\t\t\t\t\t\t />\r\n\t\t\t\t\t\t}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t</React.Fragment>\r\n\t\t);\r\n\t}\r\n}\r\n\r\n// Memetakan state global redux ke props\r\nconst MapStateToProps = (state) =>({ ContactReducers : state.ContactReducers });\r\n\r\n\r\n// Inisialisasi Function Connect Memiliki 2 parameter,\r\n// Parameter 1 : State Global Redux\r\n// Parameter 2 : State Global Lokal (custom)\r\n\r\n// Jika paramater hanya berisi 1 argument maka secara default mengembalikan STATE GLOBAL dan Function Dispatch\r\n// Jika sebalinya maka function dispatch akan dihilangkan secara default\r\nexport default connect(MapStateToProps, { CreateContact, DeleteContact, UpdateContact }) (Contact);\r\n","export const CREATE_CONTACT = 'CREATE_CONTACT';\r\nexport const DELETE_CONTACT = 'DELETE_CONTACT';\r\nexport const UPDATE_CONTACT = 'UPDATE_CONTACT';\r\n \r\nexport function CreateContact(data){\r\n\tconst action = {\r\n\t\ttype: CREATE_CONTACT,\r\n\t\tpayload: data\r\n\t}\r\n\r\n\treturn action;\r\n}\r\n\r\nexport function DeleteContact(id){\r\n\tconst action = {\r\n\t\ttype: DELETE_CONTACT,\r\n\t\tid: id \r\n\t}\r\n\treturn action;\r\n}\r\n\r\nexport function UpdateContact(id, data){\r\n\tconst action = {\r\n\t\ttype: UPDATE_CONTACT,\r\n\t\tpayload: {\r\n\t\t\tid: id,\r\n\t\t\tdata: data\r\n\t\t}\r\n\t}\r\n\treturn action;\r\n}","import { combineReducers } from 'redux';\r\nimport { ContactReducers } from './reducers/contact-reducers';\r\n\r\nexport const RootReducers = combineReducers({\r\n\tContactReducers\r\n})","import { CREATE_CONTACT, DELETE_CONTACT, UPDATE_CONTACT } from '../actions/contact-actions';\r\n\r\nexport function ContactReducers(state = [], action){\r\n\tswitch(action.type){\r\n\t\tcase CREATE_CONTACT:\r\n\t\t\tstate.push(action.payload);\r\n\t\treturn state;\r\n\r\n\t\tcase UPDATE_CONTACT:\r\n\t\t\tstate[action.payload.id] = action.payload.data;\r\n\t\treturn state;\r\n\r\n\t\tcase DELETE_CONTACT:\r\n\t\t\tstate.splice(action.id, 1);\r\n\t\treturn state;\r\n\r\n\t\tdefault:\r\n\t\treturn state;\r\n\r\n\t}\r\n}","import React from 'react';\r\nimport Contact from './components/Contact';\r\n\r\nimport { createStore } from 'redux';\r\nimport { RootReducers } from './store';\r\n\r\nimport { Provider } from 'react-redux'; // Package tambahan hooks redux di react\r\n\r\nexport default class App extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.store = createStore(RootReducers, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <React.Fragment>\r\n      \t<Provider store={this.store}>\r\n      \t\t<div className='mt-3 mb-3 ml-3 mr-3'>\r\n      \t\t\t<Contact store={this.store}/>\r\n      \t\t</div>\r\n      \t</Provider>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router, Switch, Route} from 'react-router-dom';\n\nReactDOM.render(\n<Router>\n\t<Switch>\n\t\t<Route exact path={'/'} component={App}/>\n\t\t<Route path={'*'} render={()=><>Nothing</>}/>\n\t</Switch>\n</Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n\n\n"],"sourceRoot":""}